name: Test
on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "**"
  pull_request:

jobs:
  perl:
    name: Perl
    permissions:
      contents: read
    runs-on: ubuntu-latest
    if: contains(github.event_name, 'pull_request') || github.event_name == 'push'
    steps:
    - name: checkout-merge
      if: contains(github.event_name, 'pull_request')
      uses: actions/checkout@v4
      with:
        ref: refs/pull/${{github.event.pull_request.number}}/merge
    - name: checkout
      if: github.event_name == 'push'
      uses: actions/checkout@v4
    - name: perl configuration
      id: perl-config
      run: |
        perl_modules="$(
          echo "
          Module::Build::Tiny
          Devel::Cover
          Devel::Cover::Report::Html
          Capture::Tiny
          Hash::Merge
          Text::Hunspell
          " |sort|xargs)"
        (
          echo "perl-modules=$perl_modules"
        ) >> "$GITHUB_OUTPUT"
    - name: test
      id: test
      shell: bash
      env:
        required_perl_modules: ${{ steps.perl-config.outputs.perl-modules }}
        GH_TOKEN: ${{ github.token }}
      run: |
        extra_bin=~/.extra-bin
        mkdir -p "$extra_bin"
        PATH="$extra_bin:$PATH"
        (
          cpan_modules=$(
            for module in $required_perl_modules; do
              perl -e "use $module; 1;" > /dev/null 2>/dev/null || echo $module
            done | xargs
          )
          command -v cover >/dev/null 2>/dev/null || APT_PACKAGES="libdevel-cover-perl $APT_PACKAGES"
          [ -z "$cpan_modules" ] || command -v cpanm >/dev/null 2>/dev/null || curl -s -S -L https://cpanmin.us | perl - --sudo App::cpanminus
          command -v jd && HAS_JD=1 || HAS_JD=
          (
            if [ -z "$HAS_JD" ]; then
              JD_BIN="$extra_bin"/jd
              key_go_arch=GO"ARCH"
              key_go_os=GO"OS"
              if command -v go >/dev/null 2>/dev/null; then
                go_os=$(go env "$key_go_os")
                go_arch=$(go env "$key_go_arch")
              else
                go_os=$(uname | tr A-Z a-z)
                go_arch=$(uname -m | tr A-Z a-z)
                case "$go_arch" in
                  x86_64)
                    go_arch=amd64;;
                  aarch64)
                    go_arch=arm64;;
                esac
              fi
              ./gh-release-downloader josephburnett/jd "$JD_BIN" "$go_os" "$go_arch" ||
              echo 'Could not install jd' >&2
            fi
          ) &
          [ -z "$APT_PACKAGES" ] ||
          (
            if ! sudo apt-get install -y $APT_PACKAGES; then
              sudo apt-get update &&
              sudo apt-get install -y $APT_PACKAGES
            fi
          )
          [ -z "$cpan_modules" ] || perl `command -v cpanm` -S --notest $cpan_modules
          wait
        ) > /tmp/prework || (cat /tmp/prework && false)
        ./Build.PL
        ./Build build
        (
          cd lib;
          for m in $(
            find * -name '*.pm' |
              perl -pe 's!/!::!g;s/\.pm$//'
          ); do
            perl -I. -M$m -e ''
          done
        )
        echo '::group::cover'
        (
          echo '<details><summary>cover</summary>'
          echo
          echo '```'
        ) >> "$GITHUB_STEP_SUMMARY"
        perl `command -v cover` -test 2>&1 | tee -a "$GITHUB_STEP_SUMMARY"
        (
          echo '```'
          echo '</details>'
        ) >> "$GITHUB_STEP_SUMMARY"
        echo ::endgroup::
    - name: calculate coverage
      id: coverage
      if: success() || failure()
      run: |
        cover_command=`command -v cover`
        if [ -n "$cover_command" ]; then
        perl `command -v cover` -ignore /usr/bin/shasum -report html
        fi
        if [ -e cover_db/coverage.html ]; then
          (
            t/html-to-markdown.pl cover_db/coverage.html
          ) >> "$GITHUB_STEP_SUMMARY"
        fi
        echo 'ran=1' >> "$GITHUB_OUTPUT"
    - name: store-coverage
      if: (success() || failure()) && (steps.coverage.outputs.ran == 1)
      uses: actions/upload-artifact@v4
      timeout-minutes: 5
      with:
        name: "check-spelling-coverage-${{ github.run_id }}"
        path: |
          cover_db

  standalone:
    name: Standalone
    permissions:
      contents: read
    runs-on: ubuntu-latest
    if: contains(github.event_name, 'pull_request') || github.event_name == 'push'
    steps:
    - name: checkout-merge
      if: contains(github.event_name, 'pull_request')
      uses: actions/checkout@v4
      with:
        ref: refs/pull/${{github.event.pull_request.number}}/merge
    - name: checkout
      if: github.event_name == 'push'
      uses: actions/checkout@v4
    - name: test
      id: test
      shell: bash
      run: |
        cat <<'EOF' >> "$GITHUB_STEP_SUMMARY"
        # Standalone self-test of unknown-words

        :information_source: Standalone does not have access to workflow configuration.
        As such, it doesn't know about extra dictionaries.

        EOF
        step_summary="$GITHUB_STEP_SUMMARY"
        output="$GITHUB_OUTPUT"
        for github_var in $(
          git ls-files -z |
          xargs -0 grep GITHUB_ |
          perl -pe 's/[^_A-Z]+/\n/g' |
          grep ^GITHUB_ |
          sort -u
        ); do
          eval unset $github_var
        done
        unset ACT
        export GITHUB_STEP_SUMMARY="$step_summary"
        export GITHUB_OUTPUT="$output"
        ./unknown-words.sh || true
        grep -q '@check-spelling-bot Report' "$GITHUB_STEP_SUMMARY"
    - name: upload artifact
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: standalone-artifact
        path: |
          ${{ steps.test.outputs.internal_state_directory }}
    - name: artifact note
      if: steps.upload-artifact.outcome == 'success'
      run: |
        cat <<EOF >> "$GITHUB_STEP_SUMMARY"
        # apply.pl and artifact
        You should be able to use [\`apply.pl\`](https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/apply.pl) with standalone-artifact.
        EOF
